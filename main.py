from  aiogram import Bot , types
from aiogram.dispatcher import Dispatcher , FSMContext
from aiogram.dispatcher.filters.state import State , StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup , KeyboardButton , InlineKeyboardButton , InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from finder import Finder

TOKEN = "5730080458:AAFy5WfOW13eudGldoMwcsCqc0sos_Ev8ek"
storage = MemoryStorage()

bot = Bot(token= TOKEN)
dp = Dispatcher(bot , storage=storage)

result = {}

#Keyboard----------------------------------------------------------------#
kb_client = ReplyKeyboardMarkup(resize_keyboard=True)
kb_start = ReplyKeyboardMarkup(resize_keyboard=True)
kb_lessons =  ReplyKeyboardMarkup(resize_keyboard=True)

kb_start.add(KeyboardButton("/‘∏’∂’ø÷Ä’•’¨‘±’º’°÷Ä’Ø’°")).insert(KeyboardButton("/’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂"))
kb_client.add(KeyboardButton("/‘≥’ø’∂’•’¨")).insert(KeyboardButton("/‘±’æ’°÷Ä’ø"))
kb_lessons.add(KeyboardButton("‘±’∂’£’¨")).insert(KeyboardButton("‘º’•’¶’∏÷Ç")).insert(KeyboardButton("’ä’°’ø’¥"))

inkb = InlineKeyboardMarkup(row_width=1)
inButArr = [
    InlineKeyboardButton(text='‚ùå' , callback_data='deleteMessage'),
    InlineKeyboardButton(text='‚¨ÜÔ∏è' , callback_data='upPage'),
    InlineKeyboardButton(text='‚¨áÔ∏è' , callback_data='downPage'),
    InlineKeyboardButton(text='‚úÖ' , callback_data='answer')
    ]
inkb.row(*inButArr)


#State----------------------------------------------------------------#
class FSMStates(StatesGroup):
    selectingLesson = State()
    searching = State()
    selectingPage = State()

class NotFound(Exception):
    pass

#Bot----------------------------------------------------------------#

@dp.message_handler(commands=['start'] )
async def Start(message :types.Message):
    await message.answer("’ç÷Ñ’Ω’°’∂÷Ñ" , reply_markup=kb_start)

@dp.message_handler(commands=['‘∏’∂’ø÷Ä’•’¨‘±’º’°÷Ä’Ø’°'])
async def SelectLesson(message :types.Message ):
    await FSMStates.selectingLesson.set()
    await bot.send_message(message.from_user.id,'‘∏’∂’ø÷Ä’•÷Ñ ’°’º’°÷Ä’Ø’°’∂' ,reply_markup=kb_lessons)

@dp.message_handler(commands=['‘±’æ’°÷Ä’ø'] ,state="*" )
async def Cancel(message :types.Message , state:FSMContext):
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    global result
    result = {}
    await bot.send_message(message.from_user.id,'’ä’º’Æ' , reply_markup=kb_start)

@dp.message_handler(state=FSMStates.selectingLesson )
async def SetLesson(message :types.Message , state:FSMContext):
    if message.text == '‘±’∂’£’¨':
        return await bot.send_message(message.from_user.id, '’ç’∏÷Ä’´ , ’∞’¥’´ ’π’´ ’°’∑’≠’°’ø’∏’´’¥ üò•')
        Finder.SetLesson('english')
    elif message.text == '‘º’•’¶’∏÷Ç':
        Finder.SetLesson('hayoclezu')
    elif message.text == '’ä’°’ø’¥':
        Finder.SetLesson('patmutyun')
    else:
        return await bot.send_message(message.from_user.id,'’ç’≠’°’¨')
    await FSMStates.next()
    await bot.send_message(message.from_user.id, '‘≥÷Ä’´ ’ª’´’£’µ’°÷Ä ->', reply_markup=kb_client)

@dp.message_handler(commands=['’ï’£’∂’∏÷Ç’©’µ’∏÷Ç’∂'] ,state=None )
async def Help(message :types.Message):

    res = '’Ü’°’µ’´ ’§’•’¥’´÷Å ’®’∂’ø÷Ä’∏÷Ç’¥ ’•’Ω ’°’º’°÷Ä’Ø’°’∂ ,’∞’•’ø’∏ ’Ω’≠’¥’∏÷Ç’¥’•’Ω  "‘≥’ø’∂’•’¨" ,’∞’•’ø’∏ ’£÷Ä’∏÷Ç’¥ ’•’Ω ÷Ñ’∏ ’≠’∂’§÷Ä’´ ’¥’´ 2-3 ’¢’°’º ,\
    ’∞’•’ø’∏ ’¢’•÷Ä’°’Æ ÷Å’∏÷Ç÷Å’°’Ø’´÷Å ’£÷Ä’∏÷Ç’¥ ’•’Ω ,’©’• ’£’©’°’Æ ’°’≤’µ’∏÷Ç’Ω’°’Ø’´ ’∏÷Ä ’¥’´ ’º’•’Ω’∏÷Ç’¨’ø’°’ø’∂’° ÷Ñ’•’¶ ’∫’•’ø÷Ñ÷â\
    ‘¥÷Ä’°’∂’´÷Å ’∞’•’ø’∏ ’´’∂÷Ñ’® ’Ø’¢’•÷Ä’´ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’∂’Ø’°÷Ä’® , ’ø’°’Ø’® 4 ’Ø’∂’∏’∫’Ø’°\n‚ùå - ’ª’∂’ª’•’¨\n‚¨ÜÔ∏è - ’©’•÷Ä’©’•’¨ ’æ’•÷Ä÷á\n‚¨áÔ∏è\
    - ’©’•÷Ä’©’•’¨ ’∂’•÷Ä÷Ñ÷á\n‚úÖ - ’Ω’ø’°’∂’°’¨ ’∫’°’ø’°’Ω’≠’°’∂’®\n\
    ’é’•÷Ä’ª’∏÷Ç’¥ ’Ω’≠’¥’´ "‘±’æ’°÷Ä’ø" , ’∏÷Ä ’Ø’°÷Ä’•’∂’°’Ω ’∂’∏÷Ä ’∏÷Ä’∏’∂’∏÷Ç’¥ ’°’∂’•’Ω÷â'
    await bot.send_message(message.from_user.id,res)

@dp.message_handler(commands=['‘≥’ø’∂’•’¨'] ,state= [FSMStates.searching ,FSMStates.selectingPage])
async def Finding(message :types.Message):
    await bot.send_message(message.from_user.id , '‘≥÷Ä’´ ’ª’´’£’µ’°÷Ä ->' , reply_markup=kb_client)
    await FSMStates.searching.set()

@dp.message_handler(content_types=['text']  ,state=FSMStates.searching)
async def GetPages(message :types.Message ):
    global result
    result =  Finder.FindPage(message.text)
    try:
        if len(result) ==0:
            raise NotFound()
        answer = '‘≥’ø’° ’∞’°’¥’®’∂’Ø’∂’∏÷Ç’¥ ’∞’•’ø’•’æ’µ’°’¨ ’ø’•’≤’•÷Ä’∏÷Ç’¥ ’ù \n'
        num = 0

        for i in result :
            answer += f'* {str(i[0])} ’∑’ø’•’¥’°÷Ä’°’∂’´ {str(i[1])} ’ß’ª’∏÷Ç’¥ ,’∞’°’¥’°÷Ä - {str(num)}\n'
            num += 1

        await bot.send_message(message.from_user.id,answer)
        await FSMStates.next()
    except NotFound:
        await bot.send_message(message.from_user.id,"’â’£’ø’° , ÷É’∏’´÷Å’´ ’∂’∏÷Ä’´÷Å")
    except:
        await bot.send_message(message.from_user.id,"‘ª’Ω’Ø ’°’æ’•’¨’´ ’Ø’∏’∂’Ø÷Ä’•’ø?")


@dp.message_handler(state=FSMStates.selectingPage)
async def ChoosePage(message :types.Message ):
    global result
    try:
        index =  int(message.text)
        item = result[index]
        photo = open(Finder.GetImageOfPage(item), 'rb')

        await bot.send_photo(message.from_user.id,photo , caption=f'{str(result[index][0])},{str(result[index][1])}' , reply_markup=inkb)
    except:
        await bot.send_message(message.from_user.id,"’ç’≠’°’¨")

@dp.callback_query_handler(text = 'deleteMessage' , state="*")
async def DeleteMessage(calback: types.CallbackQuery):
    await bot.delete_message(calback.from_user.id , calback.message.message_id)
    await calback.answer()

@dp.callback_query_handler(text = 'upPage' , state="*")
async def UpPage(calback: types.CallbackQuery):
    global result
    try:
        index =  calback.message.caption.split(',')
        number = (int(index[0]) ,int(index[1])-1)

        photo = open(Finder.GetImageOfPage(number), 'rb')
        await calback.message.answer_photo(photo , caption=f'{str(number[0])},{str(number[1])}' , reply_markup=inkb)
    except:
        await calback.message.answer('’ç’≠’°’¨')
    finally:
        await calback.answer()


@dp.callback_query_handler(text = 'downPage' , state="*")
async def DownPage(calback: types.CallbackQuery):
    global result
    try:
        index =  calback.message.caption.split(',')
        number = (int(index[0]) ,int(index[1])+1)

        photo = open(Finder.GetImageOfPage(number), 'rb')
        await calback.message.answer_photo(photo , caption=f'{str(number[0])},{str(number[1])}' , reply_markup=inkb)
    except:
        await calback.message.answer('’ç’≠’°’¨')
    finally:
        await calback.answer()

@dp.callback_query_handler(text = 'answer' , state="*")
async def Answer(calback: types.CallbackQuery):
    global result
    try:
        index =  calback.message.caption.split(',')
        number = (int(index[0]) ,int(index[1]))
        item = Finder.GetAnswer(number)

        photo = open(Finder.GetImageOfPage(item), 'rb')
        await calback.message.answer_photo(photo , caption=f'{str(item[0])},{str(item[1])}' , reply_markup=inkb)
    except:
        await calback.message.answer('’ç’≠’°’¨')
    finally:
        await calback.answer()
executor.start_polling(dp , skip_updates = True )
